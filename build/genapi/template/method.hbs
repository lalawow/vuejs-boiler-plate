/**
* {{&summary}}
* request: {{&methodName}}
{{#parameters}}
{{^isSingleton}} * @param {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
*/
const {{&methodName}} = function(parameters = {}) {
const domain = parameters.$domain ? parameters.$domain : getDomain()
const config = parameters.$config
let path = '{{&path}}'
let body
let queryParameters = {}
let form = {}

{{#parameters}}
{{#isQueryParameter}}
if(parameters['{{&camelCaseName}}'] !== undefined) {
queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}']
}
{{/isQueryParameter}}

{{#isPathParameter}}
path = path.replace('{{brackets name}}', `${parameters['{{&camelCaseName}}']}`)
{{/isPathParameter}}

{{#isBodyParameter}}
body = parameters.body
{{/isBodyParameter}}

{{#isFormParameter}}
if(parameters['{{&camelCaseName}}'] !== undefined) {
form['{{&name}}'] = parameters['{{&camelCaseName}}']
}
{{/isFormParameter}}

{{#required}}
{{#if isBodyParameter}}
{{else}}
if(parameters['{{&camelCaseName}}'] === undefined) {
return Promise.reject(new Error('Missing required {{&paramType}} parameter: {{&camelCaseName}}'))
}
{{/if}}
{{/required}}

{{/parameters}}

if(parameters.$queryParameters) {
Object.keys(parameters.$queryParameters).forEach(function(parameterName){
queryParameters[parameterName] = parameters.$queryParameters[parameterName]
});
}

return request('{{toLowerCase method}}', domain + path, body, queryParameters, form, config)
}


{{&tag}}.{{&methodName}}={{&methodName}}